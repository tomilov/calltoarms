name: Release (Windows 32-bit)

on:
  push:
    tags:
      - 'v*'
      - 'v*.*'
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    concurrency:
      group: release-${{ github.ref }}
      cancel-in-progress: true
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.13 x86
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          architecture: 'x86'
          cache: 'pip'
          cache-dependency-path: |
            requirements*.txt
            pyproject.toml

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MSYS
          install: >
            make
            bash
            coreutils
            grep
            zip
          cache: true

      - name: Expose Windows Python in MSYS2
        run: |
          P=$(cygpath -u "$pythonLocation")
          echo "PYTHON=$P/python.exe" >> "$GITHUB_ENV"
          "$P/python.exe" --version

      - name: Confirm Python is 32-bit
        run: |
          "$PYTHON" --version
          "$PYTHON" -c "import struct,sys; print('arch:', 8*struct.calcsize('P'), 'bits'); print(sys.executable); assert struct.calcsize('P')*8==32"

      - name: Compute version from tag
        run: |
          TAG="${GITHUB_REF_NAME}"
          [[ "$TAG" =~ ^v[0-9]+(\.[0-9]+)*$ ]] || { echo "Unexpected tag: $TAG"; exit 1; }
          VERSION="${TAG#v}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION: $VERSION"

      - name: Verify pyproject.toml version matches tag
        run: |
          PYVER=$("$PYTHON" - <<'PY'
          import sys, tomllib, pathlib
          data = tomllib.loads(pathlib.Path("pyproject.toml").read_text("utf-8"))
          v = data.get("project", {}).get("version")
          if not v:
              print("No [project].version found in pyproject.toml", file=sys.stderr)
              sys.exit(2)
          print(v)
          PY
          )
          echo "Version from tag: v${VERSION}"
          echo "Version in pyproject.toml: ${PYVER}"
          test "${PYVER}" = "${VERSION}" || {
            echo "ERROR: Version mismatch (tag=v${VERSION}, pyproject=${PYVER})"
            exit 1
          }

      - name: Install and check
        run: |
          make PYTHON="$PYTHON" venv
          make requirements-dev
          make install
          make check
          make test

      - name: Build (freeze)
        run: |
          make freeze
          ls -l dist || true
          test -f dist/calltoarms.exe

      - name: Package zip
        run: |
          mkdir -p artifacts
          ZIP="calltoarms-v${VERSION}-win32.zip"
          zip -j "artifacts/$ZIP" "dist/calltoarms.exe"
          ls -lh artifacts

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: calltoarms-${{ env.VERSION }}-win32
          path: artifacts/*.zip
          if-no-files-found: error

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: calltoarms ${{ github.ref_name }}
          files: artifacts/*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}